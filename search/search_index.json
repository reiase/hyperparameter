{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":"<ul> <li>\u4e2d\u6587</li> </ul>"},{"location":"#hyperparameter","title":"Hyperparameter","text":"<p> ENGLISH | \u4e2d\u6587\u6587\u6863 </p> <p>  **Hyperparameter, Make configurable AI applications. Build for Python/Rust hackers.**  </p> <p>Hyperparameter is a versatile library designed to streamline the management and control of hyperparameters in machine learning algorithms and system development. Tailored for AI researchers and Machine Learning Systems (MLSYS) developers, Hyperparameter offers a unified solution with a focus on ease of use in Python, high-performance access in Rust and C++, and a set of macros for seamless hyperparameter management.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#for-python-users","title":"For Python Users","text":"<ul> <li> <p>Pythonic Syntax: Define hyperparameters using keyword argument syntax;</p> </li> <li> <p>Intuitive Scoping: Control parameter scope through <code>with</code> statement;</p> </li> <li> <p>Configuration File: Easy to load parameters from config files;</p> </li> </ul>"},{"location":"#for-rust-and-c-users","title":"For Rust and C++ Users","text":"<ul> <li> <p>High-Performance Backend: Hyperparameter is implemented in Rust, providing a robust and high-performance backend for hyperparameter management. Access hyperparameters in Rust and C++ with minimal overhead, making it ideal for ML and system developers who prioritize performance.</p> </li> <li> <p>Macro-Based Parameter Management: Hyperparameter provides a set of macros for both Rust and C++ users. These macros mimic Python's <code>with</code> statements and adhere to language-specific scoping rules.</p> </li> <li> <p>Compile-Time Hashing: Both Rust and C++ interfaces utilize compile-time hashing of hyperparameter names, reducing runtime hash computation overhead.</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install hyperparameter\n</code></pre>"},{"location":"#python","title":"Python","text":"<pre><code>from hyperparameter import auto_param, param_scope\n\n@auto_param(\"foo\")\ndef foo(x=1, y=\"a\"):\n    return f\"x={x}, y={y}\"\n\nfoo()  # x=1, y='a'\n\nwith param_scope(**{\"foo.x\": 2}):\n    foo()  # x=2, y='a'\n</code></pre>"},{"location":"#rust","title":"Rust","text":"<pre><code>fn foo() -&gt; i32 {\n    with_params! {\n        get x = foo.x or 1i32; // Read hyperparameter with default value\n\n        println!(\"x={}\", x);\n    }\n}\n\nfn main() {\n    foo(); // x=1\n\n    with_params! {\n        set foo.x = 2i32; // Set hyperparameter\n\n        foo(); // x=2\n    }\n\n    foo(); // x=1\n}\n</code></pre>"},{"location":"#c","title":"C++","text":"<pre><code>ASSERT(1 == GET_PARAM(a.b, 1), \"get undefined param\");\n{\n  auto guard = WITH_PARAMS(a, 1,        //\n                            a.b, 2.0,    //\n                            a.b.c, true, //\n                            a.b.c.d, \"str\");\n  ASSERT(1 == GET_PARAM(a, 0), \"get int value\");\n  ASSERT(1 == GET_PARAM(a, 0), \"get int value\");\n}\n</code></pre>"},{"location":"#detailed-usage-examples","title":"Detailed Usage Examples","text":""},{"location":"#support-for-default-values","title":"Support for Default Values","text":""},{"location":"#python_1","title":"Python","text":"<pre><code>x = param_scope.foo.x | \"default value\"\n</code></pre>"},{"location":"#rust_1","title":"Rust","text":"<pre><code>get x = foo.x or \"default value\";\n</code></pre>"},{"location":"#scope-control-of-parameter-values","title":"Scope Control of Parameter Values","text":""},{"location":"#python_2","title":"Python","text":"<pre><code>with param_scope() as ps: # 1st scope start\n    ps.foo.x=1\n    with param_scope() as ps2: # 2nd scope start\n        ps.foo.y=2\n    # 2nd scope end\n# 1st scope end\n</code></pre>"},{"location":"#rust_2","title":"Rust","text":"<pre><code>with_params!{ // 1st scope start\n    set foo.x=1;\n\n    with_params!{ //2nd scope start\n        set foo.y=2\n\n        ...\n    } // 2nd scope end\n} // 1st scope end\n</code></pre>"},{"location":"#thread-isolationthread-safety","title":"Thread Isolation/Thread Safety","text":""},{"location":"#python_3","title":"Python","text":"<pre><code>@auto_param(\"foo\")\ndef foo(x=1): # Print hyperparameter foo.x\n    print(f\"foo.x={x}\")\n\nwith param_scope() as ps:\n    ps.foo.x=2 # Modify foo.x in the current thread\n\n    foo() # foo.x=2\n    threading.Thread(target=foo).start() # foo.x=1, new thread's hyperparameter value is not affected by the main thread\n</code></pre>"},{"location":"#rust_3","title":"Rust","text":"<pre><code>fn foo() { // Print hyperparameter foo.x\n    with_params!{\n        get x = foo.x or 1;\n\n        println!(\"foo.x={}\", x);\n    }\n}\n\nfn main() {\n    with_params!{\n        set foo.x = 2; // Modify foo.x in the current thread\n\n        foo(); // foo.x=2\n        thread::spawn(foo); // foo.x=1, new thread's hyperparameter value is not affected by the main thread\n    }\n}\n</code></pre>"},{"location":"#command-line-application","title":"Command Line Application","text":"<p>In command line applications, it's common to define hyperparameters using command line arguments (e.g., <code>-D, --define</code>) and control hyperparameters on the command line. Here's an example in Python and Rust:</p>"},{"location":"#python_4","title":"Python","text":"<pre><code># example.py\nfrom hyperparameter import param_scope, auto_param\n\n@auto_param(\"example\")\ndef main(a=0, b=1):\n    print(f\"example.a={a}, example.b={b}\")\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\"-D\", \"--define\", nargs=\"*\", default=[], action=\"extend\")\n    args = parser.parse_args()\n\n    with param_scope(*args.define):\n        main()\n</code></pre>"},{"location":"#rust_4","title":"Rust","text":"<pre><code>// example.rs\nuse hyperparameter::*;\nuse hyperparameter_derive::Parser;\n\nfn main() {\n    #[derive(Parser, Debug)]\n    struct DeriveArgs {\n        #[arg(short = 'D', long)]\n        define: Vec&lt;String&gt;,\n    }\n\n    let args = DeriveArgs::parse();\n\n    with_params! {\n        params ParamScope::from(&amp;args.define);\n\n        foo()\n    }\n}\n\nfn foo() {\n    with_params! {\n        get a = example.a or 0;\n        get b = example.b or 1;\n\n        println!(\"example.a={}, example.b={}\",a ,b);\n    }\n}\n</code></pre>"},{"location":"#more-examples","title":"More Examples","text":""},{"location":"#parameter-tunning-for-researchers","title":"parameter tunning for researchers","text":"<p>This example demonstrates how to use hyperparameter in research projects, and make experiments reproducible.</p>"},{"location":"#experiment-tracing-for-data-scientists","title":"experiment tracing for data scientists","text":"<p>This example showcases experiment management with hyperparameter and result tracing with mlflow.tracing.</p>"},{"location":"index.zh/","title":"home","text":"<ul> <li>English</li> </ul>"},{"location":"index.zh/#hyperparameter","title":"Hyperparameter","text":"<p> ENGLISH | \u4e2d\u6587\u6587\u6863 </p> <p>  **Hyperparameter, Make configurable AI applications. Build for Python/Rust hackers.**  </p> <p><code>Hyperparameter</code> \u662f\u4e00\u4e2a\u591a\u529f\u80fd\u8d85\u53c2\u6570\u7ba1\u7406\u5e93\uff0c\u65e8\u5728\u7b80\u5316\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u8d85\u53c2\u6570\u7684\u7ba1\u7406\u548c\u63a7\u5236\u3002\u4e13\u4e3a\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\uff08MLSYS\uff09\u5f00\u53d1\u8005\u8bbe\u8ba1\uff0c\u8d85\u53c2\u6570\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4fa7\u91cd\u4e8e\u5728Python\u4e2d\u6613\u4e8e\u4f7f\u7528\u3001\u5728Rust\u548cC++\u4e2d\u9ad8\u6027\u80fd\u8bbf\u95ee\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5b8f\uff0c\u4ee5\u5b9e\u73b0\u65e0\u7f1d\u8d85\u53c2\u6570\u7ba1\u7406\u3002</p>"},{"location":"index.zh/#_1","title":"\u4e3b\u8981\u7279\u6027","text":""},{"location":"index.zh/#python","title":"\u9488\u5bf9Python\u7528\u6237","text":"<ul> <li> <p>Pythonic\u8bed\u6cd5\uff1a \u4f7f\u7528keyword\u53c2\u6570\u8bed\u6cd5\u5b9a\u4e49\u8d85\u53c2\u6570\uff1b</p> </li> <li> <p>\u76f4\u89c2\u7684\u4f5c\u7528\u57df\uff1a \u901a\u8fc7<code>with</code>\u8bed\u53e5\u63a7\u5236\u53c2\u6570\u7684\u4f5c\u7528\u57df\uff1b</p> </li> <li> <p>\u914d\u7f6e\u6587\u4ef6\uff1a \u4ece\u914d\u7f6e\u6587\u4ef6\u8f7b\u677e\u52a0\u8f7d\u53c2\u6570\uff1b</p> </li> </ul>"},{"location":"index.zh/#rustc","title":"\u9488\u5bf9Rust\u548cC++\u7528\u6237","text":"<ul> <li> <p>\u9ad8\u6027\u80fd\u540e\u7aef\uff1a \u8d85\u53c2\u6570\u5728Rust\u4e2d\u5b9e\u73b0\uff0c\u63d0\u4f9b\u4e86\u5f3a\u5927\u4e14\u9ad8\u6027\u80fd\u7684\u8d85\u53c2\u6570\u7ba1\u7406\u540e\u7aef\u3002\u5728Rust\u548cC++\u4e2d\u4ee5\u6700\u5c0f\u5f00\u9500\u8bbf\u95ee\u8d85\u53c2\u6570\uff0c\u975e\u5e38\u9002\u5408\u6ce8\u91cd\u6027\u80fd\u7684ML\u548c\u7cfb\u7edf\u5f00\u53d1\u8005\u3002</p> </li> <li> <p>\u53c2\u6570\u7ba1\u7406\u5b8f\uff1a \u8d85\u53c2\u6570\u4e3aRust\u548cC++\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5b8f\u3002\u8fd9\u4e9b\u5b8f\u6a21\u4eff\u4e86Python\u7684<code>with</code>\u8bed\u53e5\uff0c\u5e76\u9075\u5faa\u7279\u5b9a\u4e8e\u8bed\u8a00\u7684\u4f5c\u7528\u57df\u89c4\u5219\u3002</p> </li> <li> <p>\u7f16\u8bd1\u65f6\u54c8\u5e0c\uff1a Rust\u548cC++\u63a5\u53e3\u90fd\u5229\u7528\u4e86\u8d85\u53c2\u6570\u540d\u79f0\u7684\u7f16\u8bd1\u65f6\u54c8\u5e0c\uff0c\u964d\u4f4e\u4e86\u8fd0\u884c\u65f6\u54c8\u5e0c\u8ba1\u7b97\u7684\u5f00\u9500\u3002</p> </li> </ul>"},{"location":"index.zh/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"index.zh/#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install hyperparameter\n</code></pre>"},{"location":"index.zh/#python_1","title":"Python","text":"<pre><code>from hyperparameter import auto_param, param_scope\n\n@auto_param(\"foo\")\ndef foo(x=1, y=\"a\"):\n    return f\"x={x}, y={y}\"\n\nfoo()  # x=1, y='a'\n\nwith param_scope(**{\"foo.x\": 2}):\n    foo()  # x=2, y='a'\n</code></pre>"},{"location":"index.zh/#rust","title":"Rust","text":"<pre><code>fn foo() -&gt; i32 {\n    with_params! {\n        get x = foo.x or 1i32; // \u8bfb\u53d6\u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u8d85\u53c2\u6570\n\n        println!(\"x={}\", x);\n    }\n}\n\nfn main() {\n    foo(); // x=1\n\n    with_params! {\n        set foo.x = 2i32; // \u8bbe\u7f6e\u8d85\u53c2\u6570\n\n        foo(); // x=2\n    }\n\n    foo(); // x=1\n}\n</code></pre>"},{"location":"index.zh/#c","title":"C++","text":"<pre><code>ASSERT(1 == GET_PARAM(a.b, 1), \"get undefined param\");\n{\n  auto guard = WITH_PARAMS(a, 1,        //\n                            a.b, 2.0,    //\n                            a.b.c, true, //\n                            a.b.c.d, \"str\");\n  ASSERT(1 == GET_PARAM(a, 0), \"get int value\");\n  ASSERT(1 == GET_PARAM(a, 0), \"get int value\");\n}\n</code></pre>"},{"location":"index.zh/#_4","title":"\u8be6\u7ec6\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"index.zh/#_5","title":"\u53c2\u6570\u9ed8\u8ba4\u503c","text":""},{"location":"index.zh/#python_2","title":"Python","text":"<pre><code>x = param_scope.foo.x | \"default value\"\n</code></pre>"},{"location":"index.zh/#rust_1","title":"Rust","text":"<pre><code>get x = foo.x or \"default value\";\n</code></pre>"},{"location":"index.zh/#_6","title":"\u63a7\u5236\u53c2\u6570\u503c\u7684\u4f5c\u7528\u57df","text":""},{"location":"index.zh/#python_3","title":"Python","text":"<pre><code>with param_scope() as ps: # \u7b2c1\u4e2a\u4f5c\u7528\u57df\u5f00\u59cb\n    ps.foo.x=1\n    with param_scope() as ps2: # \u7b2c2\u4e2a\u4f5c\u7528\u57df\u5f00\u59cb\n        ps.foo.y=2\n    # \u7b2c2\u4e2a\u4f5c\u7528\u57df\u7ed3\u675f\n# \u7b2c1\u4e2a\u4f5c\u7528\u57df\u7ed3\u675f\n</code></pre>"},{"location":"index.zh/#rust_2","title":"Rust","text":"<pre><code>with_params!{ // \u7b2c1\u4e2a\u4f5c\u7528\u57df\u5f00\u59cb\n    set foo.x=1;\n\n    with_params!{ //\u7b2c2\u4e2a\u4f5c\u7528\u57df\u5f00\u59cb\n        set foo.y=2\n\n        ...\n    } // \u7b2c2\u4e2a\u4f5c\u7528\u57df\u7ed3\u675f\n} // \u7b2c1\u4e2a\u4f5c\u7528\u57df\u7ed3\u675f\n</code></pre>"},{"location":"index.zh/#_7","title":"\u7ebf\u7a0b\u9694\u79bb/\u7ebf\u7a0b\u5b89\u5168","text":""},{"location":"index.zh/#python_4","title":"Python","text":"<pre><code>@auto_param(\"foo\")\ndef foo(x=1): # \u6253\u5370\u8d85\u53c2\u6570 foo.x\n    print(f\"foo.x={x}\")\n\nwith param_scope() as ps:\n    ps.foo.x=2 # \u5728\u5f53\u524d\u7ebf\u7a0b\u8bbe\u7f6efoo.x \n\n\u4e2d\u4fee\u6539 foo.x\n\n    foo() # foo.x=2\n    threading.Thread(target=foo).start() # foo.x=1\uff0c\u65b0\u7ebf\u7a0b\u7684\u8d85\u53c2\u6570\u503c\u4e0d\u53d7\u4e3b\u7ebf\u7a0b\u7684\u5f71\u54cd\n</code></pre>"},{"location":"index.zh/#rust_3","title":"Rust","text":"<pre><code>fn foo() { // \u6253\u5370\u8d85\u53c2\u6570 foo.x\n    with_params!{\n        get x = foo.x or 1;\n\n        println!(\"foo.x={}\", x);\n    }\n}\n\nfn main() {\n    with_params!{\n        set foo.x = 2; // \u5728\u5f53\u524d\u7ebf\u7a0b\u4e2d\u4fee\u6539 foo.x\n\n        foo(); // foo.x=2\n        thread::spawn(foo); // foo.x=1\uff0c\u65b0\u7ebf\u7a0b\u7684\u8d85\u53c2\u6570\u503c\u4e0d\u53d7\u4e3b\u7ebf\u7a0b\u7684\u5f71\u54cd\n    }\n}\n</code></pre>"},{"location":"index.zh/#_8","title":"\u547d\u4ee4\u884c\u5e94\u7528","text":"<p>\u5728\u547d\u4ee4\u884c\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570\uff08\u4f8b\u5982\uff0c<code>-D, --define</code>\uff09\u5b9a\u4e49\u8d85\u53c2\u6570\uff0c\u5e76\u5728\u547d\u4ee4\u884c\u4e0a\u63a7\u5236\u8d85\u53c2\u6570\u3002\u4ee5\u4e0b\u662fPython\u548cRust\u4e2d\u7684\u793a\u4f8b\uff1a</p>"},{"location":"index.zh/#python_5","title":"Python","text":"<pre><code># example.py\nfrom hyperparameter import param_scope, auto_param\n\n@auto_param(\"example\")\ndef main(a=0, b=1):\n    print(f\"example.a={a}, example.b={b}\")\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\"-D\", \"--define\", nargs=\"*\", default=[], action=\"extend\")\n    args = parser.parse_args()\n\n    with param_scope(*args.define):\n        main()\n</code></pre>"},{"location":"index.zh/#rust_4","title":"Rust","text":"<pre><code>// example.rs\nuse hyperparameter::*;\nuse hyperparameter_derive::Parser;\n\nfn main() {\n    #[derive(Parser, Debug)]\n    struct DeriveArgs {\n        #[arg(short = 'D', long)]\n        define: Vec&lt;String&gt;,\n    }\n\n    let args = DeriveArgs::parse();\n\n    with_params! {\n        params ParamScope::from(&amp;args.define);\n\n        foo()\n    }\n}\n\nfn foo() {\n    with_params! {\n        get a = example.a or 0;\n        get b = example.b or 1;\n\n        println!(\"example.a={}, example.b={}\",a ,b);\n    }\n}\n</code></pre>"},{"location":"index.zh/#_9","title":"\u66f4\u591a\u793a\u4f8b","text":""},{"location":"index.zh/#parameter-tunning-for-researchers","title":"parameter tunning for researchers","text":"<p>\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u5728\u7814\u7a76\u9879\u76ee\u4e2d\u4f7f\u7528\u8d85\u53c2\u6570\uff0c\u5e76\u4f7f\u5b9e\u9a8c\u53ef\u91cd\u73b0\u3002</p>"},{"location":"index.zh/#experiment-tracing-for-data-scientists","title":"experiment tracing for data scientists","text":"<p>\u8be5\u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528\u8d85\u53c2\u6570\u8fdb\u884c\u5b9e\u9a8c\u7ba1\u7406\uff0c\u5e76\u901a\u8fc7mlflow.tracing\u8fdb\u884c\u7ed3\u679c\u8ffd\u8e2a\u3002</p>"},{"location":"quick_start/","title":"quick","text":"<ul> <li>\u4e2d\u6587</li> </ul>"},{"location":"quick_start/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p><code>HyperParameter</code> \u662f\u4e00\u4e2a\u914d\u7f6e\u53c2\u6570\u7ba1\u7406\u6846\u67b6\uff0c\u4e3a Python \u5e94\u7528\u63d0\u4f9b\u8d85\u53c2\u914d\u7f6e\u4e0e\u53c2\u6570\u8c03\u4f18\u7b49\u529f\u80fd\u3002\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u5feb\u901f\u5b89\u88c5\uff1a</p> <pre><code>pip install hyperparameter\n</code></pre> <p>\u4e3b\u8981\u7279\u6027\uff1a</p> <ol> <li><code>param_scope</code> \u4e0a\u4e0b\u6587\uff0c\u5411 Python \u5e94\u7528\u63d0\u4f9b\u7ebf\u7a0b\u5b89\u5168\u7684\u3001\u53ef\u5d4c\u5957\u7684\u53c2\u6570\u7ba1\u7406\u4e0a\u4e0b\u6587\uff1b\u63d0\u4f9b\u5bf9\u8c61\u5316\u7684\u6811\u72b6\u53c2\u6570\u7ba1\u7406\uff0c\u5e76\u652f\u6301\u9ed8\u8ba4\u503c\uff1b</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import param_scope\n&gt;&gt;&gt; with param_scope(param1=1) as ps:\n...     print(f\"param1={ps.param1()}, param2={ps.param2('undefined')}\")\nparam1=1, param2=undefined\n</code></pre> <ol> <li><code>auto_param</code> \u88c5\u9970\u5668\uff0c\u81ea\u52a8\u5c06\u51fd\u6570\uff08\u6216\u8005 class\uff09\u7684\u9ed8\u8ba4\u53c2\u6570\u8f6c\u5316\u4e3a\u8d85\u53c2\uff0c\u5e76\u63a5\u53d7<code>param_scope</code>\u7684\u53c2\u6570\u63a7\u5236\uff1b</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import auto_param, param_scope\n&gt;&gt;&gt; @auto_param\n... def foo(a, b=\"default\"):\n...     print(f\"a={a}, b={b}\")\n\n&gt;&gt;&gt; foo(0)\na=0, b=default\n\n&gt;&gt;&gt; with param_scope(**{\"foo.b\": \"modified\"}):\n...     foo(0)\na=0, b=modified\n</code></pre>"},{"location":"quick_start/#_2","title":"\u8d85\u53c2\u914d\u7f6e","text":"<ol> <li>\u901a\u8fc7<code>param_scope</code>\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u8d85\u53c2\u914d\u7f6e\uff0c\u800c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import param_scope\n&gt;&gt;&gt; def foo():\n...     # read parameter from param_scope\n...     p = param_scope.param(\"default\")\n...     p2 = param_scope.namespace.param2(\"default2\")\n...     print(f\"p={p}, p2={p2}\")\n</code></pre> <p>\u5728\u4e0a\u8ff0\u51fd\u6570<code>foo</code>\u4e2d\uff0c\u5c1d\u8bd5\u8bbf\u95ee\u540d\u4e3a<code>param</code>\u7684\u8d85\u53c2\uff0c\u8d85\u53c2\u9ed8\u8ba4\u503c\u4e3a<code>default</code>\u3002<code>param_scope</code>\u9996\u5148\u5c1d\u8bd5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u8bfb\u53d6\u540c\u540d\u53c2\u6570\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u82e5\u8d85\u53c2\u672a\u5b9a\u4e49\u5219\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7ec4\u7ec7\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u53c2\u6570\u540d\u6dfb\u52a0\u547d\u540d\u7a7a\u95f4<code>namespace.param</code>\u3002\u547d\u540d\u7a7a\u95f4\u4e5f\u652f\u6301\u5d4c\u5957\u591a\u5c42\uff0c\u6bd4\u5982<code>namespace.subspace.param</code>\u3002</p> <ol> <li>\u901a\u8fc7<code>param_scope</code>\u4f20\u9012\u8d85\u53c2</li> </ol> <pre><code># call `foo` with default parameter\n&gt;&gt;&gt; foo()\np=default, p2=default2\n\n# call `foo` with modified parameter\n&gt;&gt;&gt; with param_scope(\"namespace.param2=modified\"):\n...     foo()\np=default, p2=modified\n</code></pre> <p>\u901a\u8fc7<code>with param_scope(...)</code>\u4f20\u9012\u53c2\u6570\u7684\u65f6\u5019\u652f\u6301\u4e24\u79cd\u8bed\u6cd5\uff0c\u5b57\u7b26\u4e32\u8bed\u6cd5\u4e0e\u5b57\u5178\u8bed\u6cd5\u3002\u5b57\u5178\u8bed\u6cd5\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code># call `foo` with modified parameter\n&gt;&gt;&gt; with param_scope(**{\n...         \"param\": \"modified\",\n...         \"namespace\": {\"param2\": \"modified2\"}\n...     }):\n...     foo()\np=modified, p2=modified2\n</code></pre> <p>\u5b57\u5178\u8bed\u6cd5\u9002\u5408\u914d\u5408\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528\u3002</p> <ol> <li><code>param_scope</code>\u53ef\u4ee5\u7a7f\u900f\u591a\u5c42\u51fd\u6570\u8c03\u7528\u4f20\u9012\u53c2\u6570\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; def bar():\n...     foo()\n\n# call `foo` within nested function call\n&gt;&gt;&gt; with param_scope(\"namespace.param2=modified\"):\n...     bar()\np=default, p2=modified\n</code></pre>"},{"location":"quick_start/#_3","title":"\u81ea\u52a8\u8d85\u53c2","text":"<ol> <li><code>auto_param</code> \u53ef\u4ee5\u81ea\u52a8\u4e3a\u51fd\u6570\uff08\u6216\u8005 class\uff09\u6dfb\u52a0\u8d85\u53c2\u914d\u7f6e\u529f\u80fd</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import auto_param\n&gt;&gt;&gt; @auto_param\n... def foo(param, param1=1):\n...     print(f\"param={param}, param1={param1}\")\n\n&gt;&gt;&gt; foo(0)\nparam=0, param1=1\n</code></pre> <ol> <li>\u901a\u8fc7<code>param_scope</code>\u5411<code>auto_param</code>\u4f20\u9012\u53c2\u6570\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; with param_scope(**{\"foo.param1\": 0}):\n...     foo(0)\nparam=0, param1=0\n</code></pre>"},{"location":"quick_start.zh/","title":"quick","text":"<ul> <li>English</li> </ul>"},{"location":"quick_start.zh/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p><code>HyperParameter</code> \u662f\u4e00\u4e2a\u914d\u7f6e\u53c2\u6570\u7ba1\u7406\u6846\u67b6\uff0c\u4e3a Python \u5e94\u7528\u63d0\u4f9b\u8d85\u53c2\u914d\u7f6e\u4e0e\u53c2\u6570\u8c03\u4f18\u7b49\u529f\u80fd\u3002\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u5feb\u901f\u5b89\u88c5\uff1a</p> <pre><code>pip install hyperparameter\n</code></pre> <p>\u4e3b\u8981\u7279\u6027\uff1a</p> <ol> <li><code>param_scope</code> \u4e0a\u4e0b\u6587\uff0c\u5411 Python \u5e94\u7528\u63d0\u4f9b\u7ebf\u7a0b\u5b89\u5168\u7684\u3001\u53ef\u5d4c\u5957\u7684\u53c2\u6570\u7ba1\u7406\u4e0a\u4e0b\u6587\uff1b\u63d0\u4f9b\u5bf9\u8c61\u5316\u7684\u6811\u72b6\u53c2\u6570\u7ba1\u7406\uff0c\u5e76\u652f\u6301\u9ed8\u8ba4\u503c\uff1b</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import param_scope\n&gt;&gt;&gt; with param_scope(param1=1) as ps:\n...     print(f\"param1={ps.param1()}, param2={ps.param2('undefined')}\")\nparam1=1, param2=undefined\n</code></pre> <ol> <li><code>auto_param</code> \u88c5\u9970\u5668\uff0c\u81ea\u52a8\u5c06\u51fd\u6570\uff08\u6216\u8005 class\uff09\u7684\u9ed8\u8ba4\u53c2\u6570\u8f6c\u5316\u4e3a\u8d85\u53c2\uff0c\u5e76\u63a5\u53d7<code>param_scope</code>\u7684\u53c2\u6570\u63a7\u5236\uff1b</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import auto_param, param_scope\n&gt;&gt;&gt; @auto_param\n... def foo(a, b=\"default\"):\n...     print(f\"a={a}, b={b}\")\n\n&gt;&gt;&gt; foo(0)\na=0, b=default\n\n&gt;&gt;&gt; with param_scope(**{\"foo.b\": \"modified\"}):\n...     foo(0)\na=0, b=modified\n</code></pre>"},{"location":"quick_start.zh/#_2","title":"\u8d85\u53c2\u914d\u7f6e","text":"<ol> <li>\u901a\u8fc7<code>param_scope</code>\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u8d85\u53c2\u914d\u7f6e\uff0c\u800c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import param_scope\n&gt;&gt;&gt; def foo():\n...     # read parameter from param_scope\n...     p = param_scope.param(\"default\")\n...     p2 = param_scope.namespace.param2(\"default2\")\n...     print(f\"p={p}, p2={p2}\")\n</code></pre> <p>\u5728\u4e0a\u8ff0\u51fd\u6570<code>foo</code>\u4e2d\uff0c\u5c1d\u8bd5\u8bbf\u95ee\u540d\u4e3a<code>param</code>\u7684\u8d85\u53c2\uff0c\u8d85\u53c2\u9ed8\u8ba4\u503c\u4e3a<code>default</code>\u3002<code>param_scope</code>\u9996\u5148\u5c1d\u8bd5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u8bfb\u53d6\u540c\u540d\u53c2\u6570\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u82e5\u8d85\u53c2\u672a\u5b9a\u4e49\u5219\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7ec4\u7ec7\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u53c2\u6570\u540d\u6dfb\u52a0\u547d\u540d\u7a7a\u95f4<code>namespace.param</code>\u3002\u547d\u540d\u7a7a\u95f4\u4e5f\u652f\u6301\u5d4c\u5957\u591a\u5c42\uff0c\u6bd4\u5982<code>namespace.subspace.param</code>\u3002</p> <ol> <li>\u901a\u8fc7<code>param_scope</code>\u4f20\u9012\u8d85\u53c2</li> </ol> <pre><code># call `foo` with default parameter\n&gt;&gt;&gt; foo()\np=default, p2=default2\n\n# call `foo` with modified parameter\n&gt;&gt;&gt; with param_scope(\"namespace.param2=modified\"):\n...     foo()\np=default, p2=modified\n</code></pre> <p>\u901a\u8fc7<code>with param_scope(...)</code>\u4f20\u9012\u53c2\u6570\u7684\u65f6\u5019\u652f\u6301\u4e24\u79cd\u8bed\u6cd5\uff0c\u5b57\u7b26\u4e32\u8bed\u6cd5\u4e0e\u5b57\u5178\u8bed\u6cd5\u3002\u5b57\u5178\u8bed\u6cd5\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code># call `foo` with modified parameter\n&gt;&gt;&gt; with param_scope(**{\n...         \"param\": \"modified\",\n...         \"namespace\": {\"param2\": \"modified2\"}\n...     }):\n...     foo()\np=modified, p2=modified2\n</code></pre> <p>\u5b57\u5178\u8bed\u6cd5\u9002\u5408\u914d\u5408\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528\u3002</p> <ol> <li><code>param_scope</code>\u53ef\u4ee5\u7a7f\u900f\u591a\u5c42\u51fd\u6570\u8c03\u7528\u4f20\u9012\u53c2\u6570\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; def bar():\n...     foo()\n\n# call `foo` within nested function call\n&gt;&gt;&gt; with param_scope(\"namespace.param2=modified\"):\n...     bar()\np=default, p2=modified\n</code></pre>"},{"location":"quick_start.zh/#_3","title":"\u81ea\u52a8\u8d85\u53c2","text":"<ol> <li><code>auto_param</code> \u53ef\u4ee5\u81ea\u52a8\u4e3a\u51fd\u6570\uff08\u6216\u8005 class\uff09\u6dfb\u52a0\u8d85\u53c2\u914d\u7f6e\u529f\u80fd</li> </ol> <pre><code>&gt;&gt;&gt; from hyperparameter import auto_param\n&gt;&gt;&gt; @auto_param\n... def foo(param, param1=1):\n...     print(f\"param={param}, param1={param1}\")\n\n&gt;&gt;&gt; foo(0)\nparam=0, param1=1\n</code></pre> <ol> <li>\u901a\u8fc7<code>param_scope</code>\u5411<code>auto_param</code>\u4f20\u9012\u53c2\u6570\uff1a</li> </ol> <pre><code>&gt;&gt;&gt; with param_scope(**{\"foo.param1\": 0}):\n...     foo(0)\nparam=0, param1=0\n</code></pre>"},{"location":"reference/","title":"Reference (English)","text":""},{"location":"reference/#hyperparameter.api.param_scope","title":"<code>param_scope(*args, **kwargs)</code>","text":"<p>               Bases: <code>_HyperParameter</code></p> <p>A thread-safe hyperparameter context scope</p> <p>Examples:</p> <p>create new <code>param_scope</code></p> <pre><code>&gt;&gt;&gt; ps = param_scope(a=\"a\", b=\"b\")           # create from call arguments\n&gt;&gt;&gt; ps = param_scope(**{\"a\": \"a\", \"b\": \"b\"}) # create from a dict\n</code></pre> <p>read parameters from <code>param_scope</code></p> <pre><code>&gt;&gt;&gt; ps.a() # read parameter\n'a'\n&gt;&gt;&gt; ps.c(\"c\")  # read parameter with default value if missing\n'c'\n&gt;&gt;&gt; ps.c | \"c\" # another way for reading missing parameters\n'c'\n</code></pre> <p><code>param_scope</code> as a context scope</p> <pre><code>&gt;&gt;&gt; with param_scope(**{\"a\": \"a\"}) as ps:\n...     print(ps.a())\na\n</code></pre> <p>read parameter from param_scope in a function</p> <pre><code>&gt;&gt;&gt; def foo():\n...    with param_scope() as ps:\n...        return ps.a()\n&gt;&gt;&gt; with param_scope(**{\"a\": \"a\", \"b\": \"b\"}) as ps:\n...     foo() # foo should get param_scope using a with statement\n'a'\n</code></pre> <p>modify parameters in nested scopes</p> <pre><code>&gt;&gt;&gt; with param_scope.empty(**{'a': 1, 'b': 2}) as ps:\n...     _repr_dict(ps.storage().storage())\n...     with param_scope(**{'b': 3}) as ps:\n...         _repr_dict(ps.storage().storage())\n...     with param_scope() as ps:\n...         _repr_dict(ps.storage().storage())\n[('a', 1), ('b', 2)]\n[('a', 1), ('b', 3)]\n[('a', 1), ('b', 2)]\n</code></pre> <p>use object-style parameter key in param_scope</p> <pre><code>&gt;&gt;&gt; with param_scope(**{\"a.b.c\": [1,2]}) as ps:\n...     ps.a.b.c()\n[1, 2]\n</code></pre> <p>access parameter with <code>param_scope</code></p> <pre><code>&gt;&gt;&gt; with param_scope(x=1):\n...     param_scope.x(2) # read parameter\n...     param_scope.y(2) # read a missing parameter with default value\n...     param_scope.y | 2\n...     param_scope.z = 3\n...     param_scope.z | 0\n1\n2\n2\n3\n</code></pre> <p>convert param_scope to dict:</p> <pre><code>&gt;&gt;&gt; ps = param_scope.empty(a=1, b=2)\n&gt;&gt;&gt; _repr_dict(dict(ps))\n[('a', 1), ('b', 2)]\n</code></pre> Source code in <code>hyperparameter/api.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__()\n    self.update(kwargs)\n    for line in args:\n        if \"=\" in line:\n            k, v = line.split(\"=\", 1)\n            self.put(k, v)\n</code></pre>"},{"location":"reference/#hyperparameter.api.param_scope.__enter__","title":"<code>__enter__()</code>","text":"<p>enter a <code>param_scope</code> context</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with param_scope():\n...     param_scope.p = \"origin\"\n...     with param_scope(**{\"p\": \"origin\"}) as ps:\n...         ps.storage().storage()      # outer scope\n...         with param_scope() as ps:   # unmodified scope\n...             ps.storage().storage()  # inner scope\n...         with param_scope(**{\"p\": \"modified\"}) as ps: # modified scope\n...             ps.storage().storage()  # inner scope with modified params\n...         _ = param_scope(**{\"p\": \"modified\"}) # not used in with ctx\n...         with param_scope() as ps:   # unmodified scope\n...             ps.storage().storage()  # inner scope\n{'p': 'origin'}\n{'p': 'origin'}\n{'p': 'modified'}\n{'p': 'origin'}\n</code></pre> Source code in <code>hyperparameter/api.py</code> <pre><code>def __enter__(self):\n    \"\"\"enter a `param_scope` context\n\n    Examples\n    --------\n    &gt;&gt;&gt; with param_scope():\n    ...     param_scope.p = \"origin\"\n    ...     with param_scope(**{\"p\": \"origin\"}) as ps:\n    ...         ps.storage().storage()      # outer scope\n    ...         with param_scope() as ps:   # unmodified scope\n    ...             ps.storage().storage()  # inner scope\n    ...         with param_scope(**{\"p\": \"modified\"}) as ps: # modified scope\n    ...             ps.storage().storage()  # inner scope with modified params\n    ...         _ = param_scope(**{\"p\": \"modified\"}) # not used in with ctx\n    ...         with param_scope() as ps:   # unmodified scope\n    ...             ps.storage().storage()  # inner scope\n    {'p': 'origin'}\n    {'p': 'origin'}\n    {'p': 'modified'}\n    {'p': 'origin'}\n    \"\"\"\n\n    self._storage.enter()\n    return self\n</code></pre>"},{"location":"reference/#hyperparameter.api.param_scope.current","title":"<code>current()</code>  <code>staticmethod</code>","text":"<p>get current <code>param_scope</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with param_scope(a=1) as ps:\n...     param_scope.current().a(\"empty\") # read `a` from current `param_scope`\n'1'\n</code></pre> <pre><code>&gt;&gt;&gt; with param_scope() as ps1:\n...     with param_scope(a=1) as ps2:\n...         param_scope.current().a = 2  # set parameter `a` = 2\n...         param_scope.a(\"empty\")       # read `a` in `ps2`\n...     param_scope.a(\"empty\")           # read `a` in `ps1`, where `a` is not set\n'2'\n'empty'\n</code></pre> Source code in <code>hyperparameter/api.py</code> <pre><code>@staticmethod\ndef current():\n    \"\"\"get current `param_scope`\n\n    Examples\n    --------\n    &gt;&gt;&gt; with param_scope(a=1) as ps:\n    ...     param_scope.current().a(\"empty\") # read `a` from current `param_scope`\n    '1'\n\n    &gt;&gt;&gt; with param_scope() as ps1:\n    ...     with param_scope(a=1) as ps2:\n    ...         param_scope.current().a = 2  # set parameter `a` = 2\n    ...         param_scope.a(\"empty\")       # read `a` in `ps2`\n    ...     param_scope.a(\"empty\")           # read `a` in `ps1`, where `a` is not set\n    '2'\n    'empty'\n    \"\"\"\n    retval = param_scope()\n    retval._storage = TLSKVStorage.current()\n    return retval\n</code></pre>"},{"location":"reference/#hyperparameter.api.param_scope.empty","title":"<code>empty(*args, **kwargs)</code>  <code>staticmethod</code>","text":"<p>create an empty <code>param_scope</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with param_scope(a=\"not empty\") as ps: # start a new param_scope `a` = 'not empty'\n...     param_scope.a(\"empty\")             # read parameter `a`\n...     with param_scope.empty() as ps2:   # parameter `a` is cleared in ps2\n...         param_scope.a(\"empty\")         # read parameter `a` = 'empty'\n'not empty'\n'empty'\n</code></pre> Source code in <code>hyperparameter/api.py</code> <pre><code>@staticmethod\ndef empty(*args, **kwargs):\n    \"\"\"create an empty `param_scope`.\n\n    Examples\n    --------\n    &gt;&gt;&gt; with param_scope(a=\"not empty\") as ps: # start a new param_scope `a` = 'not empty'\n    ...     param_scope.a(\"empty\")             # read parameter `a`\n    ...     with param_scope.empty() as ps2:   # parameter `a` is cleared in ps2\n    ...         param_scope.a(\"empty\")         # read parameter `a` = 'empty'\n    'not empty'\n    'empty'\n    \"\"\"\n    retval = param_scope().clear().update(kwargs)\n    for line in args:\n        if \"=\" in line:\n            k, v = line.split(\"=\", 1)\n            retval.put(k, v)\n    return retval\n</code></pre>"},{"location":"reference/#hyperparameter.api.param_scope.init","title":"<code>init(params=None)</code>  <code>staticmethod</code>","text":"<p>init param_scope for a new thread.</p> Source code in <code>hyperparameter/api.py</code> <pre><code>@staticmethod\ndef init(params=None):\n    \"\"\"init param_scope for a new thread.\"\"\"\n    param_scope(**params).__enter__()\n</code></pre>"},{"location":"reference/#hyperparameter.api.auto_param","title":"<code>auto_param(name_or_func)</code>","text":"<p>Convert keyword arguments into hyperparameters</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @auto_param\n... def foo(a, b=2, c='c', d=None):\n...     print(a, b, c, d)\n</code></pre> <pre><code>&gt;&gt;&gt; foo(1)\n1 2 c None\n</code></pre> <pre><code>&gt;&gt;&gt; with param_scope('foo.b=3'):\n...     foo(2)\n2 3 c None\n</code></pre> <p>classes are also supported:</p> <pre><code>&gt;&gt;&gt; @auto_param\n... class foo:\n...     def __init__(self, a, b=2, c='c', d=None):\n...         print(a, b, c, d)\n</code></pre> <pre><code>&gt;&gt;&gt; obj = foo(1)\n1 2 c None\n</code></pre> <pre><code>&gt;&gt;&gt; with param_scope('foo.b=3'):\n...     obj = foo(2)\n2 3 c None\n</code></pre> <pre><code>&gt;&gt;&gt; @auto_param('myns.foo.params')\n... def foo(a, b=2, c='c', d=None):\n...     print(a, b, c, d)\n&gt;&gt;&gt; foo(1)\n1 2 c None\n</code></pre> <pre><code>&gt;&gt;&gt; with param_scope('myns.foo.params.b=3'):\n...     foo(2)\n2 3 c None\n</code></pre> <pre><code>&gt;&gt;&gt; with param_scope('myns.foo.params.b=3'):\n...     param_scope.myns.foo.params.b = 4\n...     foo(2)\n2 4 c None\n</code></pre> Source code in <code>hyperparameter/api.py</code> <pre><code>def auto_param(name_or_func):\n    \"\"\"Convert keyword arguments into hyperparameters\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; @auto_param\n    ... def foo(a, b=2, c='c', d=None):\n    ...     print(a, b, c, d)\n\n    &gt;&gt;&gt; foo(1)\n    1 2 c None\n\n    &gt;&gt;&gt; with param_scope('foo.b=3'):\n    ...     foo(2)\n    2 3 c None\n\n    classes are also supported:\n    &gt;&gt;&gt; @auto_param\n    ... class foo:\n    ...     def __init__(self, a, b=2, c='c', d=None):\n    ...         print(a, b, c, d)\n\n    &gt;&gt;&gt; obj = foo(1)\n    1 2 c None\n\n    &gt;&gt;&gt; with param_scope('foo.b=3'):\n    ...     obj = foo(2)\n    2 3 c None\n\n    &gt;&gt;&gt; @auto_param('myns.foo.params')\n    ... def foo(a, b=2, c='c', d=None):\n    ...     print(a, b, c, d)\n    &gt;&gt;&gt; foo(1)\n    1 2 c None\n\n    &gt;&gt;&gt; with param_scope('myns.foo.params.b=3'):\n    ...     foo(2)\n    2 3 c None\n\n    &gt;&gt;&gt; with param_scope('myns.foo.params.b=3'):\n    ...     param_scope.myns.foo.params.b = 4\n    ...     foo(2)\n    2 4 c None\n    \"\"\"\n\n    if callable(name_or_func):\n        return auto_param(None)(name_or_func)\n\n    if has_rust_backend:\n\n        def hashed_wrapper(func):\n            predef_kws = {}\n\n            if name_or_func is None:\n                namespace = func.__name__\n            else:\n                namespace = name_or_func\n\n            signature = inspect.signature(func)\n            for k, v in signature.parameters.items():\n                if v.default != v.empty:\n                    name = \"{}.{}\".format(namespace, k)\n                    predef_kws[k] = xxh64(name)\n\n            @functools.wraps(func)\n            def inner(*arg, **kws):\n                with param_scope() as hp:\n                    for k, v in predef_kws.items():\n                        if k not in kws:\n                            try:\n                                val = hp._storage.get_entry(v)\n                                kws[k] = val\n                            except ValueError:\n                                pass\n                    return func(*arg, **kws)\n\n            return inner\n\n        return hashed_wrapper\n\n    def wrapper(func):\n        predef_kws = {}\n        predef_val = {}\n\n        if name_or_func is None:\n            namespace = func.__name__\n        else:\n            namespace = name_or_func\n\n        signature = inspect.signature(func)\n        for k, v in signature.parameters.items():\n            if v.default != v.empty:\n                name = \"{}.{}\".format(namespace, k)\n                predef_kws[k] = name\n                predef_val[name] = v.default\n\n        @functools.wraps(func)\n        def inner(*arg, **kws):\n            with param_scope() as hp:\n                local_params = {}\n                for k, v in predef_kws.items():\n                    if getattr(hp(), v).get_or_else(None) is not None and k not in kws:\n                        kws[k] = getattr(hp(), v).get_or_else(None)\n                        local_params[v] = hp.get(v)\n                    else:\n                        local_params[v] = predef_val[v]\n                return func(*arg, **kws)\n\n        return inner\n\n    return wrapper\n</code></pre>"},{"location":"structured_parameter/","title":"Structured Parameter","text":"<p>The main idea of <code>HyperParameter</code> is to organize the parameters and parameter accesses into a tree structure, by which we can refer to each parameter with a unique name and identify each access to the parameters. Then we can modify each parameter and control the access to the parameters.</p>"},{"location":"structured_parameter/#nested-parameters-and-parameter-path","title":"Nested Parameters and Parameter Path","text":"<p>The parameters are stored in a nested dict, a very common solution for python programs, and can be easily serialized into JSON or YAML format. For example:</p> <pre><code>cfg = {\n    \"param1\": 1, # unique name: param1\n    \"obj2\": {\n        \"param3\": \"value4\", # unique name: obj2.param3\n        \"param5\": 6,        # unique name: obj2.param5\n    },\n}\n</code></pre> <p>We can directly refer to the value <code>value4</code> by <code>cfg[\"obj2\"][\"param3\"]</code>. But we also need to check whether the parameter is missing from the cfg, and handle the default value.</p> <p><code>HyperParameter</code> offers a tiny DSL to access the parameters. The DSL syntax is very similar to <code>jsonpath</code>, but compatible with python syntax so that the interpreter and code editor can check for syntax errors. (I found this feature saves me a lot of time.). The first thing to use the DSL is converting the cfg into <code>HyperParameter</code>, and then we can use the DSL:</p> <pre><code># convert a nested dict into HyperParameter\nhp = HyperParameter(**cfg) \n\n# or create the HyperParameter object from scratch\nhp = HyperParameter(param1=1, obj2={\"param3\": \"value4\"})\n\n# the DSL for access the parameter\nparam = hp().obj2.param3(default=\"undefined\")\n</code></pre> <p><code>hp().obj2.param3(default=\"undefined\")</code> is the inline DSL for reading parameter from <code>HyperParameter</code> object. It looks like a <code>jsonpath</code> expression but has support for default values.</p>"},{"location":"structured_parameter/#best-practice-for-structure-parameters-with-parameter-path","title":"Best Practice for Structure Parameters with Parameter Path","text":""},{"location":"structured_parameter/#a-quick-example-of-recommendation-model","title":"A Quick Example of Recommendation Model","text":"<p>Suppose we are building a wide&amp;deep model with <code>keras</code>.</p> <pre><code>class WideAndDeepModel(keras.Model):\n    def __init__(self, units=30, activation=\"relu\", **kwargs):\n        super().__init__(**kwargs)\n        self.hidden1 = keras.layers.Dense(units, activation=activation)\n        self.hidden2 = keras.layers.Dense(units, activation=activation)\n        self.main_output = keras.layers.Dense(1)\n        self.aux_output = keras.layers.Dense(1)\n\n    def call(self, inputs):\n        input_A , input_B = inputs\n        hidden1 = self.hidden1(input_B)\n        hidden2 = self.hidden2(hidden1)\n        concat = keras.layers.concatenate([input_A, hidden2])\n        main_output = self.main_output()(concat)\n        aux_output = self.aux_output()(hidden2)\n        return main_outputi, aux_output\n</code></pre> <p>The model is straightforward and does not support many parameters. If we want to add batch normalization, dropout, and leaky-relu tricks to the model, we have to modify the code as follows:</p> <pre><code>class WideAndDeepModel(keras.Model):\n    def __init__(self, \n        units=[30, 30, 30],\n        activation=\"relu\",\n        use_bn=False,\n        bn_momentum=0.99,\n        bn_epsilon=0.001,\n        bn_center=True,\n        bn_scale=True,\n        bn_beta_initializer=\"zeros\",\n        bn_gamma_initializer=\"ones\",\n        bn_moving_mean_initializer=\"zeros\",\n        bn_moving_variance_initializer=\"ones\",\n        use_dropout=False,\n        ...):\n\n        ...\n        self.bn1 = keras.layers.BatchNormalization(\n            momentum=bn_momentum,\n            epsilon=bn_epsilon,\n            center=bn_center,\n            scale=bn_scale,\n            beta_initializer=bn_beta_initializer,\n            gamma_initializer=bn_gamma_initializer,\n            ...,\n        )\n</code></pre> <p>The code becomes too complicated, having dozens of parameters to handle, most of which are not used.</p>"},{"location":"structured_parameter/#a-fast-trial-of-structured-parameter","title":"A Fast Trial of Structured Parameter","text":"<p>We can simplify the code with <code>auto_param</code>, which automatically converts the parameters into a parameter tree. And then, we can specify the parameters by name:</p> <pre><code># add parameter support for custom functions with a decorator\n@auto_param(\"myns.rec.rank.dropout\")\nclass dropout:\n    def __init__(self, ratio=0.5):\n        ...\n\n# add parameter support for library functions \nwrapped_bn = auto_param(\"myns.rec.rank.bn\")(keras.layers.BatchNormalization)\n</code></pre> <p><code>myns.rec.rank</code> is the namespace for my project, and <code>myns.rec.rank.dropout</code> refers to the function defined in our code. We can refer to the keyword arguments (e.g. <code>ratio=0.5</code>) with the path <code>hp().myns.rec.rank.dropout</code>. </p> <p>After making the building block configurable, we can simplify the model: <pre><code>class WideAndDeepModel(keras.Model):\n    def __init__(self, \n        units=[30, 30, 30],\n        activation=\"relu\",\n        ...):\n\n        ...\n        self.bn1 = wrapped_bn()\n        self.dropout1 = dropout()\n</code></pre> And we can change the parameters of the <code>BN</code> layers with <code>param_scope</code>:</p> <pre><code>with param_scope(**{\n    \"myns.rec.rank.dropout.ratio\": 0.6,\n    \"myns.rec.rank.bn.center\": False,\n    ...\n}):\n    model = WideAndDeepModel()\n</code></pre> <p>Or read the parameters from a JSON file:</p> <pre><code>with open(\"model.cfg.json\") as f:\n    cfg = json.load(f)\nwith param_scope(**cfg):\n    model = WideAndDeepModel() \n</code></pre>"},{"location":"structured_parameter/#fine-grained-control-of-structured-parameters","title":"Fine-grained Control of Structured Parameters","text":"<p>In the last section, we have introduced how to structure the parameters with <code>auto_param</code> and modify them with <code>param_scope</code> by their path. However, we may also need to access the same parameter in different places in our code, e.g., different layers in a DNN model.</p> <p>In such situation, we can break our code into named scopes. And then, we can identify each access to the parameters and set a value for each access.</p> <p>To add named scopes to our code, we can use <code>param_scope</code>:</p> <pre><code>class WideAndDeepModel(keras.Model):\n    def __init__(self, \n        units=[30, 30, 30],\n        activation=\"relu\",\n        ...):\n\n        ...\n        with param_scope[\"layer1\"]():\n            self.bn1 = wrapped_bn()\n            self.dropout1 = dropout()\n        with param_scope[\"layer2\"]():\n            self.bn2 = wrapped_bn()\n            self.dropout2 = dropout()\n        ...\n\nwith param_scope[\"wdmodel\"]():\n    model = WideAndDeepModel()\n</code></pre> <p><code>param_scope[\"layer1\"]</code> creates a named scope called <code>layer1</code>. Since the scope is created inside another named scope <code>param_scope[\"wdmodel\"]</code>, its full path should be <code>wdmodel.layer1</code>. We can specify different values of a parameter according to its path. For example:</p> <pre><code>with param_scope[\"wdmodel\"](**{\n    \"myns.rec.rank.dropout.ratio@wdmodel.layer1\": 0.6,\n    \"myns.rec.rank.dropout.ratio@wdmodel.layer2\": 0.7,\n}):\n    model = WideAndDeepModel()\n</code></pre> <p>With the above code, we get a drop ratio of 0.6 for <code>layer1</code> and 0.7 for <code>layer2</code>.</p>"},{"location":"examples/optimization/","title":"Hyperparameter Optimization","text":"<ul> <li>\u4e2d\u6587</li> </ul>"},{"location":"examples/optimization/#hyper-parameter-optimization","title":"Hyper-Parameter Optimization","text":"<p>This example is based on <code>optuna</code> quick start example. Optuna is an open-source hyperparameter optimization framework which is easy to use:</p> <pre><code>import optuna\n\ndef objective(trial):\n    x = trial.suggest_float('x', -10, 10)\n    return (x - 2) ** 2\n\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre> <p>The above example creates a <code>study</code> object to search for the best parameter <code>x</code> that minimizes the objective function <code>(x-2)^2</code>.</p>"},{"location":"examples/optimization/#parameter-searching-with-hyperparameter","title":"Parameter Searching with <code>HyperParameter</code>","text":"<p>Parameter searching can be much easier with <code>HyperParameter</code>:</p> <pre><code>import optuna\nfrom hyperparameter import param_scope, auto_param, lazy_dispatch\n\n@auto_param\ndef objective(x = 0.0):\n    return (x - 2) ** 2\n\ndef wrapper(trial):\n    trial = lazy_dispatch(trial)\n    with param_scope(**{\n        \"objective.x\": trial.suggest_float('objective.x', -10, 10)\n    }):\n        return objective()\n\nstudy = optuna.create_study()\nstudy.optimize(wrapper, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre> <p>We directly apply the <code>auto_param</code> decorator to the objective function so that it accepts parameters from <code>param_scope</code>. Then we define a wrapper function that adapts <code>param_scope</code> API to <code>optuna</code>'s <code>trial</code> API and starts the parameter experiment as suggested in <code>optuna</code>'s example.</p>"},{"location":"examples/optimization/#put-the-best-parameters-into-production","title":"Put the Best Parameters into Production","text":"<p>To put the best parameters into production, we can directly pass them to <code>param_scope</code>. This is very convenient if you want to put a ML model into production.</p> <pre><code>with param_scope(**study.best_params):\n    print(f\"{study.best_params} =&gt; {objective()}\")\n</code></pre>"},{"location":"examples/optimization/#optimization-on-nested-functions","title":"Optimization on Nested Functions","text":"<p><code>param_scope</code> and <code>auto_param</code> also support complex problems with nested functions:</p> <pre><code>@auto_param\ndef objective_x(x = 0.0):\n    return (x - 2) ** 2\n\n@auto_param\ndef objective_y(y = 0.0):\n    return (y - 1) ** 3\n\ndef objective():\n    return objective_x() * objective_y()\n\ndef wrapper(trial):\n    trial = lazy_dispatch(trial)\n    with param_scope(**{\n        \"objective_x.x\": trial.suggest_float('objective_x.x', -10, 10),\n        \"objective_y.y\": trial.suggest_float('objective_y.y', -10, 10)\n    }):\n        return objective()\n\nstudy = optuna.create_study()\nstudy.optimize(wrapper, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre>"},{"location":"examples/optimization.zh/","title":"\u53c2\u6570\u4f18\u5316","text":"<ul> <li>English</li> </ul>"},{"location":"examples/optimization.zh/#_1","title":"\u53c2\u6570\u5bfb\u4f18","text":"<p>\u539f\u793a\u4f8b\u51fa\u81ea<code>optuna</code>\u9879\u76ee\u7684quick start example. Optuna \u662f\u4e00\u6b3e\u6613\u4e8e\u4f7f\u7528\u7684\u5f00\u6e90\u8d85\u53c2\u4f18\u5316\u6846\u67b6:</p> <pre><code>import optuna\n\ndef objective(trial):\n    x = trial.suggest_float('x', -10, 10)\n    return (x - 2) ** 2\n\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a <code>study</code> \u5bf9\u8c61\uff0c\u7528\u6765\u641c\u7d22\u6700\u5c0f\u5316\u76ee\u6807\u51fd\u6570 <code>(x-2)^2</code> \u7684\u53c2\u6570<code>x</code> \u7684\u6700\u4f18\u53d6\u503c\uff0c.</p>"},{"location":"examples/optimization.zh/#hyperparameter","title":"\u4f7f\u7528 <code>HyperParameter</code>\u8fdb\u884c\u8d85\u53c2\u641c\u7d22","text":"<p>\u6211\u4eec\u53ef\u4ee5\u501f\u52a9 <code>HyperParameter</code>\u5c06\u4e0a\u8ff0\u641c\u7d22\u8fc7\u7a0b\u5927\u5e45\u7b80\u5316\uff1a</p> <pre><code>import optuna\nfrom hyperparameter import param_scope, auto_param, lazy_dispatch\n\n@auto_param\ndef objective(x = 0.0):\n    return (x - 2) ** 2\n\ndef wrapper(trial):\n    trial = lazy_dispatch(trial)\n    with param_scope(**{\n        \"objective.x\": trial.suggest_float('objective.x', -10, 10)\n    }):\n        return objective()\n\nstudy = optuna.create_study()\nstudy.optimize(wrapper, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre> <p>\u901a\u8fc7 <code>auto_param</code> \u88c5\u9970\u5668\uff0c\u6211\u4eec\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4e86<code>\u8d85\u53c2\u5316</code>\uff0c\u4f7f\u5176\u80fd\u591f\u4ece<code>param_scope</code>\u8bfb\u53d6\u53c2\u6570\u3002\u4e4b\u540e\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\u6765\u5bf9\u63a5<code>param_scope</code>\u548c <code>optuna</code> \u7684<code>trial</code> \u63a5\u53e3\uff0c\u5e76\u5f00\u59cb\u8d85\u53c2\u5bfb\u4f18\u3002</p> <p>\u4f7f\u7528 <code>auto_param</code> \u4e0e <code>param_scope</code> \u7684\u597d\u5904\u662f\u5c06\u4ee3\u7801\u4e0d\u518d\u8026\u5408<code>optuna</code>\uff0c\u53ef\u4ee5\u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u590d\u7528\u4ee3\u7801\u3002</p>"},{"location":"examples/optimization.zh/#_2","title":"\u751f\u4ea7\u5316\u90e8\u7f72","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5c06 <code>study</code> \u641c\u7d22\u5230\u7684\u6700\u4f18\u53c2\u6570\u4f20\u9012\u7ed9 <code>param_scope</code> \u6765\u662f\u5b9e\u73b0\u5b9e\u9a8c\u7ed3\u679c\u7684\u590d\u73b0\u4ee5\u53ca\u751f\u4ea7\u5316\u90e8\u7f72\u3002</p> <pre><code>with param_scope(**study.best_params):\n    print(f\"{study.best_params} =&gt; {objective()}\")\n</code></pre>"},{"location":"examples/optimization.zh/#_3","title":"\u591a\u5c42\u5d4c\u5957\u51fd\u6570\u7684\u53c2\u6570\u4f18\u5316","text":"<p><code>param_scope</code> \u548c <code>auto_param</code> \u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u590d\u6742\u95ee\u9898\u4e2d\u7684\u5d4c\u5957\u51fd\u6570\u7684\u53c2\u6570\u4f18\u5316\uff0c\u6bd4\u5982\uff1a</p> <pre><code>@auto_param\ndef objective_x(x = 0.0):\n    return (x - 2) ** 2\n\n@auto_param\ndef objective_y(y = 0.0):\n    return (y - 1) ** 3\n\ndef objective():\n    return objective_x() * objective_y()\n\ndef wrapper(trial):\n    trial = lazy_dispatch(trial)\n    with param_scope(**{\n        \"objective_x.x\": trial.suggest_float('objective_x.x', -10, 10),\n        \"objective_y.y\": trial.suggest_float('objective_y.y', -10, 10)\n    }):\n        return objective()\n\nstudy = optuna.create_study()\nstudy.optimize(wrapper, n_trials=100)\n\nstudy.best_params  # E.g. {'x': 2.002108042}\n</code></pre> <p>\u4f7f\u7528 <code>auto_param</code> \u53ef\u4ee5\u907f\u514d\u5728\u5d4c\u5957\u51fd\u6570\u4e4b\u95f4\u4f20\u9012 <code>trial</code> \u5bf9\u8c61\uff0c\u8ba9\u4ee3\u7801\u770b\u8d77\u6765\u66f4\u4e3a\u81ea\u7136\u76f4\u63a5\u3002</p>"}]}